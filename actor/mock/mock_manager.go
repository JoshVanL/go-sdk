// Code generated by MockGen. DO NOT EDIT.
// Source: manager/manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	actor "github.com/dapr/go-sdk/actor"
	error "github.com/dapr/go-sdk/actor/error"
	gomock "github.com/golang/mock/gomock"
)

// MockActorManager is a mock of ActorManager interface.
type MockActorManager struct {
	ctrl     *gomock.Controller
	recorder *MockActorManagerMockRecorder
}

// MockActorManagerMockRecorder is the mock recorder for MockActorManager.
type MockActorManagerMockRecorder struct {
	mock *MockActorManager
}

// NewMockActorManager creates a new mock instance.
func NewMockActorManager(ctrl *gomock.Controller) *MockActorManager {
	mock := &MockActorManager{ctrl: ctrl}
	mock.recorder = &MockActorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorManager) EXPECT() *MockActorManagerMockRecorder {
	return m.recorder
}

// DeactivateActor mocks base method.
func (m *MockActorManager) DeactivateActor(actorID string) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateActor", actorID)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// DeactivateActor indicates an expected call of DeactivateActor.
func (mr *MockActorManagerMockRecorder) DeactivateActor(actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateActor", reflect.TypeOf((*MockActorManager)(nil).DeactivateActor), actorID)
}

// InvokeMethod mocks base method.
func (m *MockActorManager) InvokeMethod(actorID, methodName string, request []byte) ([]byte, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethod", actorID, methodName, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// InvokeMethod indicates an expected call of InvokeMethod.
func (mr *MockActorManagerMockRecorder) InvokeMethod(actorID, methodName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethod", reflect.TypeOf((*MockActorManager)(nil).InvokeMethod), actorID, methodName, request)
}

// InvokeMethodContext mocks base method.
func (m *MockActorManager) InvokeMethodContext(ctx context.Context, actorID, methodName string, request []byte) ([]byte, error.ActorErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeMethodContext", ctx, actorID, methodName, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error.ActorErr)
	return ret0, ret1
}

// InvokeMethodContext indicates an expected call of InvokeMethodContext.
func (mr *MockActorManagerMockRecorder) InvokeMethodContext(ctx, actorID, methodName, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeMethodContext", reflect.TypeOf((*MockActorManager)(nil).InvokeMethodContext), ctx, actorID, methodName, request)
}

// InvokeReminder mocks base method.
func (m *MockActorManager) InvokeReminder(actorID, reminderName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeReminder", actorID, reminderName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeReminder indicates an expected call of InvokeReminder.
func (mr *MockActorManagerMockRecorder) InvokeReminder(actorID, reminderName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeReminder", reflect.TypeOf((*MockActorManager)(nil).InvokeReminder), actorID, reminderName, params)
}

// InvokeTimer mocks base method.
func (m *MockActorManager) InvokeTimer(actorID, timerName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeTimer", actorID, timerName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeTimer indicates an expected call of InvokeTimer.
func (mr *MockActorManagerMockRecorder) InvokeTimer(actorID, timerName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeTimer", reflect.TypeOf((*MockActorManager)(nil).InvokeTimer), actorID, timerName, params)
}

// InvokeTimerContext mocks base method.
func (m *MockActorManager) InvokeTimerContext(ctx context.Context, actorID, timerName string, params []byte) error.ActorErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeTimerContext", ctx, actorID, timerName, params)
	ret0, _ := ret[0].(error.ActorErr)
	return ret0
}

// InvokeTimerContext indicates an expected call of InvokeTimerContext.
func (mr *MockActorManagerMockRecorder) InvokeTimerContext(ctx, actorID, timerName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeTimerContext", reflect.TypeOf((*MockActorManager)(nil).InvokeTimerContext), ctx, actorID, timerName, params)
}

// RegisterActorImplFactory mocks base method.
func (m *MockActorManager) RegisterActorImplFactory(f actor.Factory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterActorImplFactory", f)
}

// RegisterActorImplFactory indicates an expected call of RegisterActorImplFactory.
func (mr *MockActorManagerMockRecorder) RegisterActorImplFactory(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActorImplFactory", reflect.TypeOf((*MockActorManager)(nil).RegisterActorImplFactory), f)
}
