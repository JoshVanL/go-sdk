// Code generated by MockGen. DO NOT EDIT.
// Source: actor.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	actor "github.com/dapr/go-sdk/actor"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClient)(nil).ID))
}

// Type mocks base method.
func (m *MockClient) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockClientMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockClient)(nil).Type))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

func (mr *MockServerMockRecorder) Invoke(arg0, arg1 interface{}) *gomock.Call {
  mr.mock.ctrl.T.Helper()
  return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockServer)(nil).Invoke), arg0, arg1)
}

func (m *MockServer) Invoke(ctx context.Context, input string) (string, error) {
  m.ctrl.T.Helper()
  ret := m.ctrl.Call(m, "Invoke", ctx, input)
  ret0, _ := ret[0].(string)
  ret1, _ := ret[1].(error)
  return ret0, ret1
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockServer) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockServerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockServer)(nil).ID))
}

// SaveState mocks base method.
func (m *MockServer) SaveState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveState")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveState indicates an expected call of SaveState.
func (mr *MockServerMockRecorder) SaveState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveState", reflect.TypeOf((*MockServer)(nil).SaveState))
}

// SaveStateContext mocks base method.
func (m *MockServer) SaveStateContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStateContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStateContext indicates an expected call of SaveStateContext.
func (mr *MockServerMockRecorder) SaveStateContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStateContext", reflect.TypeOf((*MockServer)(nil).SaveStateContext), ctx)
}

// SetID mocks base method.
func (m *MockServer) SetID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockServerMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockServer)(nil).SetID), arg0)
}

// SetStateManager mocks base method.
func (m *MockServer) SetStateManager(arg0 actor.StateManager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateManager", arg0)
}

// SetStateManager indicates an expected call of SetStateManager.
func (mr *MockServerMockRecorder) SetStateManager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateManager", reflect.TypeOf((*MockServer)(nil).SetStateManager), arg0)
}

// Type mocks base method.
func (m *MockServer) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockServerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockServer)(nil).Type))
}

// MockReminderCallee is a mock of ReminderCallee interface.
type MockReminderCallee struct {
	ctrl     *gomock.Controller
	recorder *MockReminderCalleeMockRecorder
}

// MockReminderCalleeMockRecorder is the mock recorder for MockReminderCallee.
type MockReminderCalleeMockRecorder struct {
	mock *MockReminderCallee
}

// NewMockReminderCallee creates a new mock instance.
func NewMockReminderCallee(ctrl *gomock.Controller) *MockReminderCallee {
	mock := &MockReminderCallee{ctrl: ctrl}
	mock.recorder = &MockReminderCalleeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReminderCallee) EXPECT() *MockReminderCalleeMockRecorder {
	return m.recorder
}

// ReminderCall mocks base method.
func (m *MockReminderCallee) ReminderCall(arg0 string, arg1 []byte, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReminderCall", arg0, arg1, arg2, arg3)
}

// ReminderCall indicates an expected call of ReminderCall.
func (mr *MockReminderCalleeMockRecorder) ReminderCall(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReminderCall", reflect.TypeOf((*MockReminderCallee)(nil).ReminderCall), arg0, arg1, arg2, arg3)
}

// MockStateManager is a mock of StateManager interface.
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerMockRecorder
}

// MockStateManagerMockRecorder is the mock recorder for MockStateManager.
type MockStateManagerMockRecorder struct {
	mock *MockStateManager
}

// NewMockStateManager creates a new mock instance.
func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &MockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateManager) EXPECT() *MockStateManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStateManager) Add(stateName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", stateName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStateManagerMockRecorder) Add(stateName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStateManager)(nil).Add), stateName, value)
}

// AddContext mocks base method.
func (m *MockStateManager) AddContext(ctx context.Context, stateName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContext", ctx, stateName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContext indicates an expected call of AddContext.
func (mr *MockStateManagerMockRecorder) AddContext(ctx, stateName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContext", reflect.TypeOf((*MockStateManager)(nil).AddContext), ctx, stateName, value)
}

// Contains mocks base method.
func (m *MockStateManager) Contains(stateName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", stateName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockStateManagerMockRecorder) Contains(stateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockStateManager)(nil).Contains), stateName)
}

// ContainsContext mocks base method.
func (m *MockStateManager) ContainsContext(ctx context.Context, stateName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsContext", ctx, stateName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsContext indicates an expected call of ContainsContext.
func (mr *MockStateManagerMockRecorder) ContainsContext(ctx, stateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsContext", reflect.TypeOf((*MockStateManager)(nil).ContainsContext), ctx, stateName)
}

// Flush mocks base method.
func (m *MockStateManager) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockStateManagerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockStateManager)(nil).Flush))
}

// Get mocks base method.
func (m *MockStateManager) Get(stateName string, reply interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", stateName, reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStateManagerMockRecorder) Get(stateName, reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStateManager)(nil).Get), stateName, reply)
}

// GetContext mocks base method.
func (m *MockStateManager) GetContext(ctx context.Context, stateName string, reply interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", ctx, stateName, reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockStateManagerMockRecorder) GetContext(ctx, stateName, reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockStateManager)(nil).GetContext), ctx, stateName, reply)
}

// Remove mocks base method.
func (m *MockStateManager) Remove(stateName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", stateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockStateManagerMockRecorder) Remove(stateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStateManager)(nil).Remove), stateName)
}

// RemoveContext mocks base method.
func (m *MockStateManager) RemoveContext(ctx context.Context, stateName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContext", ctx, stateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContext indicates an expected call of RemoveContext.
func (mr *MockStateManagerMockRecorder) RemoveContext(ctx, stateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContext", reflect.TypeOf((*MockStateManager)(nil).RemoveContext), ctx, stateName)
}

// Save mocks base method.
func (m *MockStateManager) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStateManagerMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStateManager)(nil).Save))
}

// SaveContext mocks base method.
func (m *MockStateManager) SaveContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContext indicates an expected call of SaveContext.
func (mr *MockStateManagerMockRecorder) SaveContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContext", reflect.TypeOf((*MockStateManager)(nil).SaveContext), arg0)
}

// Set mocks base method.
func (m *MockStateManager) Set(stateName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", stateName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStateManagerMockRecorder) Set(stateName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStateManager)(nil).Set), stateName, value)
}
